<program>	::= <block>
<assignment>	::= <lvalue> := <expr> | local <id> := <expr>
<lvalue>	::= <id> | <arrayelem>
<arrayelem>	::= <id> [ <expr> ]
<expr>		::= <arithmexp> | <funccall> | <read> | <array>
<value>		::= <number> | <id> | <arrayelem>
<number>	::= 1<number> | 2<number> | 3<number> ... | 9<number> | e
<block>		::= begin <operatorlist> end
<operatorlist>	::= <operator><operatorlist> | <operator>;
<operator>	::= <block> | <assignment>; | <whilecycle> | <ifstatement>  | <funccall>; | <print>; | <funcdef> | <return>
<whilecycle>	::= while <condition> do <operator>
<ifstatement>	::= if <condition> then <operator> else <operator> | if <condition> then <operator>
<condition>	::= <logicalexp> | <logicalexp> and <condition> | <logicalexp> or <condition> | not <logicalexp>
<logicalexp>	::= <value><cmp><value> | <value>
<cmp>		::= < | = | > | <= | >=
<arithmexp>	::= <term> | <term> + <arithmexp> | <term> - <arithmexp>
<term>		::= <value> | <value> * <term> | <value> / <term>
<funccall>	::= call <id> (<farglist>)
<farglist>	::= <value> , <farglist> | <value> | e
<print>		::= print <expr>
<read>		::= read | intread
<funcdef>	::= function <id> (<farglist>) <block>
<return>	::= return <expr>
<array>		::=	array [ <number> ]
